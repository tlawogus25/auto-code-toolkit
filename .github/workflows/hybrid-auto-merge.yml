name: hybrid-auto-merge
on:
  pull_request:
    types: [labeled, synchronize, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read

env:
  REQUIRED_APPROVALS: "1"

jobs:
  gate_and_enable:
    if: contains(github.event.pull_request.labels.*.name, 'automation:auto-merge')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load toolkit config
        id: cfg
        run: |
          if [ -f config/toolkit.config.json ]; then
            echo "CFG<<EOF" >> $GITHUB_OUTPUT
            cat config/toolkit.config.json >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CFG={}" >> $GITHUB_OUTPUT
          fi

      - name: Validate changed files (allowed/forbidden globs)
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const {owner, repo} = context.repo;
            const files = await github.paginate(github.rest.pulls.listFiles, {owner, repo, pull_number: pr.number});
            const cfg = JSON.parse(process.env.CFG || "{}");
            const allowed = (cfg.policy && cfg.policy.allowed_globs) || ["^src/","^app/","^docs/"];
            const forbidden = (cfg.policy && cfg.policy.forbidden_globs) || ["^\\.env", "^secrets/", "^\\.git/"];
            const A = allowed.map(s=>new RegExp(s.replace(/\*\*/g,".*").replace(/\*/g,"[^/]*")));
            const F = forbidden.map(s=>new RegExp(s.replace(/\*\*/g,".*").replace(/\*/g,"[^/]*")));
            function inAllowed(p){ return A.some(r=>r.test(p)); }
            function inForbidden(p){ return F.some(r=>r.test(p)); }
            for (const f of files) {
              if (inForbidden(f.filename)) core.setFailed(`Forbidden path: ${f.filename}`);
              if (!inAllowed(f.filename)) core.setFailed(`Outside allowed globs: ${f.filename}`);
            }
        env:
          CFG: ${{ steps.cfg.outputs.CFG }}

      - name: Ensure PR is not draft
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "PR is draft"; exit 1; fi

      - name: Ensure required checks are green
        env: { GH_TOKEN: ${{ github.token }} }
        run: gh pr checks ${{ github.event.pull_request.number }} --required --fail-fast

      - name: Ensure approvals
        env: { GH_TOKEN: ${{ github.token }} }
        run: |
          APPROVALS=$(gh pr view ${{ github.event.pull_request.number }} --json reviews --jq '[.reviews[]|select(.state=="APPROVED")]|length')
          test $APPROVALS -ge $REQUIRED_APPROVALS || (echo "Need at least $REQUIRED_APPROVALS approval(s)"; exit 1)

      - name: Enable auto-merge (squash)
        env: { GH_TOKEN: ${{ github.token }} }
        run: gh pr merge ${{ github.event.pull_request.number }} --auto --squash
