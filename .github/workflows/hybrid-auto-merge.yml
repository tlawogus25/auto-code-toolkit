name: hybrid-auto-merge

on:
  pull_request:
    types: [opened, reopened, labeled, synchronize, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read

env:
  REQUIRED_APPROVALS: "1"  # 사람 PR 기본 요구치

concurrency:
  group: ham-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  gate_and_enable:
    if: >
      contains(github.event.pull_request.labels.*.name, 'automation:auto-merge') &&
      (github.event.action != 'labeled' || github.event.label.name == 'automation:auto-merge')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load toolkit config
        id: cfg
        run: |
          if [ -f config/toolkit.config.json ]; then
            echo "CFG<<EOF" >> $GITHUB_OUTPUT
            cat config/toolkit.config.json >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CFG={}" >> $GITHUB_OUTPUT
          fi

      - name: Validate changed files (allowed/forbidden globs)
        uses: actions/github-script@v7
        env:
          CFG: ${{ steps.cfg.outputs.CFG }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const {owner, repo} = context.repo;
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              {owner, repo, pull_number: pr.number, per_page: 100}
            );

            const cfg = JSON.parse(process.env.CFG || "{}");
            const allowed = (cfg.policy && cfg.policy.allowed_globs) ||
              ["^src/", "^app/", "^docs/", "^apps/", "^services/", "^README\\.md$"];
            const forbidden = (cfg.policy && cfg.policy.forbidden_globs) ||
              ["^\\.env", "^secrets/", "^\\.git/"];

            const A = allowed.map(s=>new RegExp(s.replace(/\*\*/g,".*").replace(/\*/g,"[^/]*")));
            const F = forbidden.map(s=>new RegExp(s.replace(/\*\*/g,".*").replace(/\*/g,"[^/]*")));

            const offenders = [];
            for (const f of files) {
              const p = f.filename;
              if (F.some(r=>r.test(p))) { core.setFailed(`Forbidden path: ${p}`); return; }
              if (!A.some(r=>r.test(p))) offenders.push(p);
            }
            if (offenders.length) core.setFailed(`Outside allowed globs: ${offenders.join(", ")}`);

      # 🔽 승인 요구 동적 완화: 봇/자동 브랜치는 0건
      - name: Decide approvals requirement
        id: gate
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const isBot = (pr.user?.login === 'github-actions[bot]');
            const isAutoBranch = String(pr.head?.ref || '').startsWith('auto/');
            const need = (isBot || isAutoBranch) ? 0 : parseInt(process.env.REQUIRED_APPROVALS || "1", 10);
            core.info(`Approvals required = ${need} (bot=${isBot}, autoBranch=${isAutoBranch})`);
            core.setOutput('need', String(need));

      - name: Ensure PR is not draft
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "PR is draft"; exit 1; fi

      # 🔽 필수 체크 없으면 스킵, 있으면 통과 요구
      - name: Ensure required checks are green
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          # Count required checks via gh pr checks (best-effort)
          REQ_COUNT=$(gh pr checks ${{ github.event.pull_request.number }} --required | grep -E '✓|X|pending|in_progress|queued' -c || echo 0)
          if [ "${REQ_COUNT:-0}" -eq 0 ]; then
            echo "No required checks configured; skipping gate."
          else
            gh pr checks ${{ github.event.pull_request.number }} --required --fail-fast
          fi

      - name: Ensure approvals (may skip)
        if: steps.gate.outputs.need != '0'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          NEED=${{ steps.gate.outputs.need }}
          APPROVALS=$(gh pr view ${{ github.event.pull_request.number }} --json reviews --jq '[.reviews[]|select(.state=="APPROVED")]|length')
          echo "Approvals: $APPROVALS / Need: $NEED"
          test "$APPROVALS" -ge "$NEED" || (echo "Need at least $NEED approval(s)"; exit 1)

      - name: Enable auto-merge (squash)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh pr merge ${{ github.event.pull_request.number }} --auto --squash
