# auto-code.yml                                                        # 워크플로 파일명
name: auto-code                                                        # 이름
on:                                                                    # 트리거
  issues: { types: [opened, labeled] }
  issue_comment: { types: [created] }
  workflow_dispatch:        
    inputs:
      body:
        description: "/auto 한 줄(옵션). 비워두면 오케스트레이터가 no-op로 종료"
        required: false
        type: string                                   # 수동 트리거


permissions:                                                           # 권한
  contents: write                                                      # 콘텐츠 쓰기
  pull-requests: write                                                 # PR 쓰기
  issues: write                                                            # 이슈 읽기


concurrency:                                                           # 동시성
  group: auto-code-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true                                       # 중복 취소

jobs:                                                                  # 잡
  run:                                                                 # 잡 이름
    runs-on: [self-hosted, macOS, ARM64]                               # 러너
    if: "github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'automation:run') && startsWith(github.event.issue.body, '/auto')) || (github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'automation:run') && startsWith(github.event.comment.body, '/auto'))"                     # 조건

    steps:                                                              # 스텝
      - name: Checkout (default branch, deep, clean)                    # 체크아웃
        uses: actions/checkout@v4                                       # 액션
        with:                                                           # 옵션
          ref: ${{ github.event.repository.default_branch }}            # 기본 브랜치
          fetch-depth: 0                                                # 전체 히스토리
          clean: true                                                   # 깨끗하게

      - name: Show HEADs (debug)                                        # 디버그
        shell: bash                                                     # 셸
        run: |                                                          # 스크립트
          echo "local HEAD=$(git rev-parse HEAD)"                       # 로컬 HEAD
          echo "remote HEAD=$(git ls-remote origin ${{ github.event.repository.default_branch }} | awk '{print $1}')" # 원격 HEAD

      - name: Ensure local bin on PATH                                  # PATH 보강
        shell: bash                                                     # 셸
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"                  # 경로 추가

      - name: "Preflight: required files (git object)"                  # 프리플라이트(깃 오브젝트)
        shell: bash                                                     # 셸
        run: |                                                          # 스크립트
          set -euo pipefail                                            
          files=(                                                      
            "packages/core/src/index.mjs"                               
            "packages/core/src/orchestrator.mjs"                        
            "packages/core/src/llm/openai.mjs"                          
            "packages/core/src/llm/gemini.mjs"                         
          )
          for f in "${files[@]}"; do                                    
            if git show "HEAD:$f" >/dev/null 2>&1; then                 
              echo "OK (git): $f"                                       
            else                                                        
              echo "::error file=$f::missing in commit (git object)"    
              exit 1                                                    
            fi                                                          
          done                                                          

      - name: "Preflight: required files (workspace)"                   # ★ 이름 수정(중복 구분)
        shell: bash                                                     # 셸
        run: |                                                          # 스크립트
          set -euo pipefail                                            
          for f in packages/core/src/index.mjs packages/core/src/orchestrator.mjs packages/core/src/llm/openai.mjs packages/core/src/llm/gemini.mjs; do 
            if [ -f "$f" ]; then                                        
              echo "OK (fs): $f"                                        
              ls -l "$f"                                                
              (command -v sha256sum >/dev/null && sha256sum "$f") || shasum -a 256 "$f" 
            else                                                        
              echo "::error file=$f::missing on disk (workspace)"       
              exit 1                                                    
            fi                                                          
          done                                                          

      - name: Export dispatch input as env (optional)
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: echo "AUTO_INPUT_BODY=${{ github.event.inputs.body }}" >> "$GITHUB_ENV"

      - name: Auto Code (Toolkit)                                       # 오토코드 실행
        uses: ./.github/actions/auto-code                               # 로컬 액션
        env:                                                            # 환경변수
          GH_TOKEN: ${{ github.token }}                                 # 토큰
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}                 # 시크릿
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}                 # 시크릿
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}           # 시크릿
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}                 # 시크릿
          AUTO_INPUT_BODY: ${{ env.AUTO_INPUT_BODY }}   # ← 오케스트레이터에서 읽게 함
        with:                                                           # 입력
          config-path: config/toolkit.config.json                       # 설정 경로
          upload-artifacts: 'true'                                      # 아티팩트 업로드

      - name: Upload stage/run meta logs                                 # ★ 스테이지/메타 아티팩트 보장
        if: always()                                                     # 항상 실행
        uses: actions/upload-artifact@v4                                 # 업로드 액션
        with:                                                            # 입력
          name: auto-logs                                                # 아티팩트명
          path: |                                                        # 경로들
            .github/auto/diagnostics-last.json                           
            .github/auto/stage-log.json                                 
            .github/auto/run-meta.json                                   
          if-no-files-found: ignore                                       # 없으면 무시
      
      - name: Cleanup label (prevent re-trigger)
        if: always() && (github.event_name == 'issues' || github.event_name == 'issue_comment') && contains(github.event.issue.labels.*.name, 'automation:run')
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          github_token: ${{ github.token }}
          labels: automation:run
